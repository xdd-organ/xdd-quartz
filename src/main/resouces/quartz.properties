# 数据库心跳语句
org.quartz.dataSource.myDS.validationQuery = select user()


# 实例名称
org.quartz.scheduler.instanceName = MyScheduler
org.quartz.scheduler.instanceId = 1
# scheduler(调度器)是本地的，即不能通过远程访问
org.quartz.scheduler.rmi.export = false
# 代理
org.quartz.scheduler.rmi.proxy = false
org.quartz.threadPool.class = org.quartz.simpl.SimpleThreadPool
# 线程数量
org.quartz.threadPool.threadCount = 5
# 所有的Quartz数据,例如Job和Trigger的细节信息被存储在内存(而不是数据库)中
# org.quartz.jobStore.class = org.quartz.simpl.RAMJobStore
# 所有的Quartz数据,例如Job和Trigger的细节信息被存储在数数据库(自带的事物事物)
org.quartz.jobStore.class =org.quartz.impl.jdbcjobstore.JobStoreTX

# 配置 JDBCJobStore 的数据库表前缀
org.quartz.jobStore.tablePrefix = QRTZ_

# 配置 JDBCJobStore 使用数据源源的名字
org.quartz.jobStore.dataSource = myDS

# 配置连接数据库参数
org.quartz.dataSource.myDS.driver = com.mysql.jdbc.Driver
org.quartz.dataSource.myDS.URL = jdbc:mysql://localhost:3307/navy?characterEncoding=utf-8
org.quartz.dataSource.myDS.user = root
org.quartz.dataSource.myDS.password = root
org.quartz.dataSource.myDS.maxConnections = 10








#QRTZ_CALENDARS 以 Blob 类型存储 Quartz 的 Calendar 信息
#QRTZ_CRON_TRIGGERS 存储 Cron Trigger，包括Cron表达式和时区信息
#QRTZ_FIRED_TRIGGERS 存储与已触发的 Trigger 相关的状态信息，以及相联 Job的执行信息QRTZ_PAUSED_TRIGGER_GRPS 存储已暂停的 Trigger组的信息
#QRTZ_SCHEDULER_STATE 存储少量的有关 Scheduler 的状态信息，和别的Scheduler实例(假如是用于一个集群中)
#QRTZ_LOCKS 存储程序的悲观锁的信息(假如使用了悲观锁)
#QRTZ_JOB_DETAILS 存储每一个已配置的 Job 的详细信息
#QRTZ_JOB_LISTENERS 存储有关已配置的 JobListener的信息
#QRTZ_SIMPLE_TRIGGERS存储简单的Trigger，包括重复次数，间隔，以及已触的次数
#QRTZ_BLOG_TRIGGERS Trigger 作为 Blob 类型存储(用于 Quartz 用户用JDBC创建他们自己定制的 Trigger 类型，JobStore并不知道如何存储实例的时候)
#QRTZ_TRIGGER_LISTENERS 存储已配置的 TriggerListener的信息
#QRTZ_TRIGGERS 存储已配置的 Trigger 的信息